/* The following code was generated by JFlex 1.4.3 on 7/11/15 9:59 PM */

package in.twbs.pure.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static in.twbs.pure.lang.psi.PureTokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/11/15 9:59 PM from the specification file
 * <tt>pure.flex</tt>
 */
class _PureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_STRINGS = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRINGS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\22\1\23\1\64\1\22\2\23\15\22\5\0\1\1\1\2\1\33"+
    "\3\2\1\31\1\7\1\117\1\120\1\2\1\30\1\116\1\62\1\25"+
    "\1\2\1\123\1\56\1\56\1\56\1\56\3\21\2\12\1\113\1\112"+
    "\1\111\1\107\1\110\2\2\1\53\1\34\1\43\1\55\1\27\1\41"+
    "\1\47\1\36\1\45\1\16\1\54\1\40\1\46\1\51\1\20\1\45"+
    "\1\52\1\44\1\35\1\37\1\50\1\42\1\16\1\14\1\57\1\16"+
    "\1\121\1\24\1\122\1\60\1\4\1\114\1\66\1\32\1\102\1\65"+
    "\1\26\1\74\1\77\1\105\1\76\2\15\1\101\1\100\1\72\1\17"+
    "\1\71\1\106\1\75\1\103\1\67\1\104\1\32\1\73\1\13\1\70"+
    "\1\15\1\61\1\115\1\63\1\2\53\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\11\1\0\7\11\30\6\1\0\10\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\2\11\1\6\1\11\1\6"+
    "\1\11\3\6\2\11\1\6\1\11\1\6\2\11\1\6\3\11\2\6"+
    "\4\11\1\6\2\11\1\6\3\11\3\6\2\11\1\6\2\11\1\6"+
    "\1\11\1\6\1\11\1\6\2\11\1\6\1\11\2\6\1\11\1\6"+
    "\2\11\1\6\3\11\1\6\1\11\1\6\2\11\2\6\1\5\1\11"+
    "\3\6\4\5\1\11\1\5\1\6\1\11\1\5\1\6\1\11\1\5"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\2\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\2\6\1\11\1\5\1\6\1\11\1\6"+
    "\3\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\7\6"+
    "\2\11\1\6\2\11\2\6\1\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\105\6\1\5\44\6\7\5\2\6"+
    "\4\0\14\5\16\0\5\6\7\0\1\5\1\0\1\5\126\0\1\3"+
    "\52\0\1\11\1\6\1\11\1\6\1\5\1\0\1\11\1\6\2\0"+
    "\4\6\10\0\1\11\1\0\3\11\1\0\1\11\1\0\2\11\1\6"+
    "\21\11\1\0\11\11\43\6\1\11\2\6\3\11\3\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\5\6\1\11\1\6\1\0\1\11\1\6\2\11\2\6\63\11"+
    "\60\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\10\0\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\2\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\11\0\46\11\2\0\1\5\7\0\47\6\110\0\33\5"+
    "\5\0\3\5\55\0\53\5\25\0\12\5\4\0\2\5\1\0\143\5"+
    "\1\0\1\5\17\0\2\5\7\0\2\5\12\5\3\5\2\0\1\5"+
    "\20\0\1\5\1\0\36\5\35\0\131\5\13\0\1\5\16\0\12\5"+
    "\41\5\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0"+
    "\1\5\3\0\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0"+
    "\66\5\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\5\1\0"+
    "\7\5\1\0\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0"+
    "\2\5\1\0\3\5\4\0\12\5\2\5\23\0\6\5\4\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\37\0\4\5\1\0\1\5\7\0\12\5\2\0\3\5\20\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\22\0\1\5\17\0\2\5\4\0\12\5\25\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\5\1\0\1\5"+
    "\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\26\0\1\5\25\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5"+
    "\4\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\5"+
    "\1\0\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\20\0\1\5\21\0\2\5\4\0\12\5\12\0\6\5\5\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5"+
    "\1\0\2\5\14\0\7\5\11\0\12\5\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\5"+
    "\2\0\4\5\40\0\1\5\37\0\12\5\26\0\10\5\1\0\44\5"+
    "\33\0\5\5\163\0\53\5\24\0\1\5\12\5\6\0\6\5\4\0"+
    "\4\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0"+
    "\1\5\1\0\12\5\6\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0"+
    "\21\5\1\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0"+
    "\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0"+
    "\1\5\4\0\1\5\3\0\12\5\46\0\12\5\6\0\130\5\10\0"+
    "\51\5\1\0\1\5\5\0\106\5\12\0\35\5\51\0\12\5\36\5"+
    "\2\0\5\5\13\0\54\5\25\0\7\5\10\0\12\5\46\0\27\5"+
    "\11\0\65\5\53\0\12\5\6\0\12\5\15\0\1\5\135\0\57\5"+
    "\21\0\7\5\4\0\12\5\51\0\36\5\15\0\2\5\12\5\54\5"+
    "\32\0\44\5\34\0\12\5\3\0\3\5\12\5\44\5\153\0\4\5"+
    "\1\0\4\5\3\0\2\5\11\0\300\6\100\0\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\11\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\11\6\10\11\6\6\2\0\6\11\2\0"+
    "\10\6\10\11\10\6\10\11\6\6\2\0\6\11\2\0\10\6\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\10\6\10\11\16\6"+
    "\2\0\10\6\10\5\10\6\10\5\10\6\10\5\5\6\1\0\2\6"+
    "\4\11\1\5\1\0\1\6\3\0\3\6\1\0\2\6\4\11\1\5"+
    "\3\0\4\6\2\0\2\6\4\11\4\0\10\6\5\11\5\0\3\6"+
    "\1\0\2\6\4\11\1\5\164\0\1\6\15\0\1\6\20\0\15\6"+
    "\145\0\1\11\4\0\1\11\2\0\1\6\3\11\2\6\3\11\1\6"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\1\6\4\11\1\6\4\5\1\6\2\0\2\6"+
    "\2\11\5\0\1\11\4\6\4\0\1\6\21\0\20\10\20\3\3\0"+
    "\1\11\1\6\u0331\0\32\10\32\3\u0716\0\57\11\1\0\57\6\1\0"+
    "\1\11\1\6\3\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\4\11\1\6\1\11\2\6\1\11\10\6\3\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\2\6\6\0\1\11\1\6\1\11"+
    "\1\6\3\0\1\11\1\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\5\7\0\1\5\20\0\27\5\11\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\120\0\1\5\u01d5\0\2\5\52\0\5\5\5\0\2\5"+
    "\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5"+
    "\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5"+
    "\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\5\2\5"+
    "\24\0\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\5\20\0\1\5"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\10\0\106\5\61\0\11\5\2\0\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\3\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\12\6\1\11\1\6\1\11\1\6\2\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\5"+
    "\2\0\1\11\1\6\1\11\1\6\1\0\1\11\1\6\1\11\1\6"+
    "\14\0\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\115\0\3\6\7\5\1\0\3\5\1\0\4\5\1\0"+
    "\27\5\35\0\64\5\16\0\62\5\34\0\12\5\30\0\6\5\3\0"+
    "\1\5\4\0\12\5\34\5\12\0\27\5\31\0\35\5\7\0\57\5"+
    "\34\0\1\5\12\5\46\0\51\5\27\0\3\5\1\0\10\5\4\0"+
    "\12\5\6\0\27\5\3\0\1\5\5\0\60\5\1\0\1\5\3\0"+
    "\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\0\3\5\2\0"+
    "\13\5\7\0\3\5\14\0\6\5\2\0\6\5\2\0\6\5\11\0"+
    "\7\5\1\0\7\5\221\0\43\5\15\0\12\5\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\6\14\0"+
    "\5\6\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0"+
    "\12\5\7\0\32\11\6\0\32\6\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\4\1\7\1\10\1\4\1\11\1\12\1\3\1\13"+
    "\14\4\1\14\1\3\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\6\3\25\1\26\1\27"+
    "\1\30\1\26\4\0\1\31\1\32\1\4\1\0\1\33"+
    "\1\34\1\35\1\36\1\4\1\37\7\4\1\40\1\41"+
    "\7\4\1\42\1\43\1\44\2\0\1\45\1\46\1\0"+
    "\2\47\3\0\1\50\14\0\1\26\2\51\1\0\1\4"+
    "\1\52\14\4\1\53\4\4\2\6\2\47\4\0\1\47"+
    "\6\0\1\54\1\55\1\56\1\57\1\60\11\4\1\61"+
    "\4\4\1\62\2\4\1\63\1\64\3\4\1\65\4\4"+
    "\1\66\1\67\1\70\1\4\1\71\1\72\1\73\1\4"+
    "\1\74\1\75\2\4\1\76\1\4\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u01f8\0\u03f0\0\u0444\0\u0498"+
    "\0\u04ec\0\u0540\0\u0150\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4"+
    "\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0150\0\u0a2c\0\u0150\0\u01f8\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0a80\0\u0150\0\u0ad4\0\u0b28\0\u0150\0\u0b7c"+
    "\0\u0150\0\u0bd0\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u024c\0\u01f8"+
    "\0\u0d74\0\u0dc8\0\u0150\0\u0e1c\0\u01f8\0\u024c\0\u0e70\0\u024c"+
    "\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110"+
    "\0\u024c\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u13b0\0\u1404\0\u0150\0\u0150\0\u1458"+
    "\0\u0150\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u0150\0\u15fc\0\u1650"+
    "\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0"+
    "\0\u1944\0\u1998\0\u0c24\0\u19ec\0\u1a40\0\u1a40\0\u1a94\0\u0150"+
    "\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34"+
    "\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u024c\0\u1ed8\0\u1f2c\0\u1f80"+
    "\0\u1fd4\0\u13b0\0\u1404\0\u1500\0\u1554\0\u2028\0\u207c\0\u20d0"+
    "\0\u2124\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370"+
    "\0\u024c\0\u024c\0\u024c\0\u024c\0\u024c\0\u23c4\0\u2418\0\u246c"+
    "\0\u24c0\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664\0\u024c\0\u26b8"+
    "\0\u270c\0\u2760\0\u27b4\0\u024c\0\u2808\0\u285c\0\u024c\0\u28b0"+
    "\0\u2904\0\u2958\0\u29ac\0\u024c\0\u2a00\0\u2a54\0\u2aa8\0\u2afc"+
    "\0\u024c\0\u024c\0\u024c\0\u2b50\0\u024c\0\u024c\0\u024c\0\u2ba4"+
    "\0\u024c\0\u024c\0\u2bf8\0\u2c4c\0\u024c\0\u2ca0\0\u024c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\10\1\5\1\10\1\11\2\12"+
    "\1\13\1\10\1\12\1\10\1\12\1\14\1\12\1\13"+
    "\1\5\1\6\1\15\1\16\1\17\1\12\2\7\1\10"+
    "\1\20\22\12\1\13\1\12\1\7\1\21\1\22\1\23"+
    "\1\6\1\24\1\25\1\26\2\10\1\27\1\30\1\31"+
    "\1\10\1\32\1\10\1\33\1\34\1\35\2\10\1\36"+
    "\1\37\1\40\1\7\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\61\54\1\55"+
    "\1\56\41\54\22\57\2\5\1\60\6\57\1\61\30\57"+
    "\1\5\72\57\1\62\70\57\125\0\1\6\21\0\1\6"+
    "\40\0\1\6\41\0\1\7\21\0\2\7\2\0\2\7"+
    "\26\0\1\7\1\0\1\7\24\0\3\7\1\0\1\7"+
    "\1\0\1\7\12\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\22\10\14\0\1\10"+
    "\24\63\1\64\37\63\1\0\37\63\5\0\2\12\2\0"+
    "\11\12\4\0\2\12\2\0\1\12\1\0\24\12\5\0"+
    "\22\12\14\0\1\12\12\0\1\13\6\0\1\13\3\0"+
    "\1\65\2\66\26\0\1\13\44\0\1\13\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\7\10\1\67\12\10\14\0\1\10\2\0\1\7"+
    "\21\0\1\7\1\70\2\0\2\7\26\0\1\7\1\0"+
    "\1\7\24\0\3\7\1\0\1\7\1\0\1\7\12\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\14\10\1\71\5\10\14\0\1\10\33\0"+
    "\1\72\152\0\1\73\43\0\1\7\21\0\2\7\2\0"+
    "\2\7\26\0\1\7\1\0\1\74\24\0\1\7\1\75"+
    "\1\7\1\0\1\7\1\0\1\7\12\0\4\10\1\0"+
    "\6\10\1\76\2\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\1\10\1\77\20\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\16\10\1\100\3\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\3\10\1\101\4\10\1\102\7\10\1\103"+
    "\1\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\1\104\1\10\2\0\1\10\1\0\24\10\5\0\22\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\20\10\1\105\1\10"+
    "\14\0\1\10\4\0\4\10\1\0\6\10\1\106\2\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\1\10"+
    "\1\107\20\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\5\10"+
    "\1\110\1\10\1\111\3\10\1\112\6\10\14\0\1\10"+
    "\4\0\4\10\1\0\6\10\1\113\2\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\22\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\1\114\1\10\2\0"+
    "\1\10\1\0\24\10\5\0\22\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\1\10\1\115\12\10\1\116\5\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\11\10\1\117\10\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\17\10\1\120\2\10\14\0"+
    "\1\10\2\0\1\7\21\0\2\7\2\0\2\7\26\0"+
    "\1\7\1\0\1\7\24\0\1\7\1\121\1\7\1\0"+
    "\1\7\1\0\1\7\10\0\1\7\21\0\2\7\2\0"+
    "\2\7\26\0\1\7\1\0\1\122\24\0\3\7\1\0"+
    "\1\7\1\0\1\7\10\0\1\7\21\0\2\7\2\0"+
    "\2\7\26\0\1\7\1\0\1\7\24\0\3\7\1\0"+
    "\1\123\1\0\1\7\20\0\1\13\2\124\2\0\2\125"+
    "\1\13\3\0\1\65\2\66\26\0\1\13\44\0\1\13"+
    "\62\0\1\126\124\0\1\127\41\0\1\130\5\0\1\131"+
    "\2\0\1\132\1\133\3\0\1\134\1\0\1\132\1\0"+
    "\1\130\1\131\2\0\1\135\1\0\1\136\2\131\1\137"+
    "\1\140\1\141\1\0\1\142\1\143\1\141\1\144\1\145"+
    "\2\0\2\145\1\146\1\0\1\147\1\0\1\150\1\132"+
    "\1\0\1\151\3\0\1\130\1\0\2\131\2\0\1\131"+
    "\1\0\2\131\25\0\1\132\33\0\1\152\77\0\1\57"+
    "\114\0\7\63\1\153\54\63\1\0\37\63\12\0\1\154"+
    "\6\0\1\154\34\0\1\154\44\0\1\154\12\0\1\155"+
    "\6\0\1\155\6\0\1\156\25\0\1\155\3\0\1\156"+
    "\40\0\1\155\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\16\10\1\157\3\10"+
    "\14\0\1\10\33\0\1\160\70\0\64\74\1\0\37\74"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\2\10\1\161\17\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\4\10\1\162\15\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\17\10\1\163\2\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\1\164\1\10\2\0"+
    "\1\10\1\0\24\10\5\0\22\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\6\10\1\165\13\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\1\166\1\10\2\0\1\10"+
    "\1\0\24\10\5\0\22\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\10\10\1\167\11\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\14\10\1\170\5\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\7\10\1\171\6\10\1\172\3\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\4\10\1\173\15\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\1\174\21\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\2\10\1\175\17\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\16\10\1\176\3\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\1\10\1\177\20\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\1\200\21\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\1\10\1\201\20\10\14\0\1\10\12\0\10\202"+
    "\4\0\2\202\2\0\1\202\1\0\24\202\5\0\22\202"+
    "\14\0\1\202\21\0\1\203\34\0\1\203\44\0\1\203"+
    "\1\0\1\130\21\0\1\130\1\136\37\0\1\130\51\0"+
    "\1\132\6\0\1\132\34\0\1\132\44\0\1\132\12\0"+
    "\10\204\4\0\2\204\2\0\1\204\1\0\24\204\5\0"+
    "\22\204\14\0\1\204\21\0\1\205\34\0\1\205\44\0"+
    "\1\205\20\0\1\141\14\0\1\206\1\0\1\207\6\0"+
    "\1\131\2\0\1\210\101\0\1\211\5\0\1\131\106\0"+
    "\1\212\16\0\1\213\5\0\1\131\2\0\1\214\6\0"+
    "\1\215\103\0\1\131\125\0\1\131\117\0\1\131\3\0"+
    "\1\131\126\0\1\131\6\0\1\215\105\0\1\131\136\0"+
    "\1\211\2\0\1\216\113\0\1\216\107\0\1\211\10\0"+
    "\1\217\2\0\1\220\70\0\2\131\2\0\1\131\1\0"+
    "\1\131\1\0\1\131\6\0\1\131\4\0\22\131\1\0"+
    "\1\131\77\0\1\61\102\0\1\154\6\0\1\154\4\0"+
    "\2\66\26\0\1\154\44\0\1\154\12\0\1\155\6\0"+
    "\1\155\34\0\1\155\44\0\1\155\4\0\4\10\1\0"+
    "\11\10\4\0\1\221\1\10\2\0\1\10\1\0\24\10"+
    "\5\0\22\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\1\10"+
    "\1\222\20\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\1\223\1\10\2\0\1\10\1\0\24\10\5\0"+
    "\22\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\1\224\1\10\2\0\1\10\1\0\24\10\5\0\22\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\5\10\1\225\14\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\2\10\1\226\17\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\10\10\1\227\11\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\1\230"+
    "\1\10\2\0\1\10\1\0\24\10\5\0\1\10\1\231"+
    "\20\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\16\10\1\232"+
    "\3\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\11\10\1\233"+
    "\10\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\2\10\1\234"+
    "\17\10\14\0\1\10\4\0\4\10\1\0\6\10\1\235"+
    "\2\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\22\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\17\10\1\236"+
    "\2\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\1\237\1\10\2\0\1\10\1\0\24\10\5\0\22\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\16\10\1\240\3\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\11\10\1\241\10\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\14\10\1\242\5\10"+
    "\14\0\1\10\43\0\1\131\74\0\1\131\17\0\1\131"+
    "\141\0\1\131\111\0\1\131\121\0\1\131\101\0\1\131"+
    "\143\0\1\131\140\0\1\131\126\0\1\131\76\0\1\131"+
    "\152\0\1\131\51\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\3\10\1\243\16\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\1\244"+
    "\1\10\2\0\1\10\1\0\24\10\5\0\22\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\11\10\1\245\10\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\14\10\1\246\5\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\1\247\1\10"+
    "\2\0\1\10\1\0\24\10\5\0\22\10\14\0\1\10"+
    "\4\0\4\10\1\0\2\10\1\250\6\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\22\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\1\10\1\251\20\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\10\10\1\252\11\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\14\10\1\253\5\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\16\10\1\254\3\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\5\10\1\255\14\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\11\10\1\256\10\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\4\10\1\257\15\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\12\10\1\260\7\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\14\10\1\261\5\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\10\10\1\262\3\10\1\263\5\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\5\10\1\264\14\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\2\10\1\265\17\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\1\266"+
    "\1\10\2\0\1\10\1\0\24\10\5\0\22\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\12\10\1\267\7\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\7\10\1\270\12\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\1\271\1\10"+
    "\2\0\1\10\1\0\24\10\5\0\22\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\5\10\1\272\14\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\15\10\1\273\4\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\11\10\1\274\10\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\1\275\1\10\2\0"+
    "\1\10\1\0\24\10\5\0\22\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\1\276\1\10\2\0\1\10"+
    "\1\0\24\10\5\0\22\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\1\277\21\10\14\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\15\1\1\11\16\1\1\11\1\1\1\11"+
    "\1\1\5\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\4\0\3\1\1\0\1\11\30\1\2\0\2\11"+
    "\1\0\1\11\1\1\3\0\1\11\14\0\3\1\1\0"+
    "\1\1\1\11\25\1\4\0\1\1\6\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  _PureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3992) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return IF;
          }
        case 64: break;
        case 27: 
          { yybegin(COMMENT); comment_nesting = 1; return MLCOMMENT;
          }
        case 65: break;
        case 6: 
          { return NATURAL;
          }
        case 66: break;
        case 21: 
          { return MLCOMMENT;
          }
        case 67: break;
        case 62: 
          { return INSTANCE;
          }
        case 68: break;
        case 40: 
          { return STRING_GAP;
          }
        case 69: break;
        case 29: 
          { return ARROW;
          }
        case 70: break;
        case 2: 
          { return WS;
          }
        case 71: break;
        case 7: 
          { return BACKSLASH;
          }
        case 72: break;
        case 56: 
          { return INFIXL;
          }
        case 73: break;
        case 9: 
          { yybegin(STRINGS); return STRING;
          }
        case 74: break;
        case 19: 
          { return LBRACK;
          }
        case 75: break;
        case 20: 
          { return RBRACK;
          }
        case 76: break;
        case 55: 
          { return INFIXR;
          }
        case 77: break;
        case 10: 
          { return LCURLY;
          }
        case 78: break;
        case 26: 
          { return DDOT;
          }
        case 79: break;
        case 14: 
          { return TICK;
          }
        case 80: break;
        case 46: 
          { return TYPE;
          }
        case 81: break;
        case 11: 
          { return RCURLY;
          }
        case 82: break;
        case 51: 
          { return FALSE;
          }
        case 83: break;
        case 25: 
          { return OF;
          }
        case 84: break;
        case 60: 
          { return NEWTYPE;
          }
        case 85: break;
        case 28: 
          { return SLCOMMENT;
          }
        case 86: break;
        case 63: 
          { return QUALIFIED;
          }
        case 87: break;
        case 34: 
          { return DARROW;
          }
        case 88: break;
        case 16: 
          { return COMMA;
          }
        case 89: break;
        case 35: 
          { return LARROW;
          }
        case 90: break;
        case 8: 
          { return DOT;
          }
        case 91: break;
        case 42: 
          { yybegin(BLOCK_STRINGS); return STRING;
          }
        case 92: break;
        case 32: 
          { return IN;
          }
        case 93: break;
        case 13: 
          { return SEMI;
          }
        case 94: break;
        case 50: 
          { return WHERE;
          }
        case 95: break;
        case 57: 
          { return IMPORT;
          }
        case 96: break;
        case 23: 
          { return STRING_ERROR;
          }
        case 97: break;
        case 39: 
          { return STRING_ESCAPED;
          }
        case 98: break;
        case 54: 
          { return FORALL;
          }
        case 99: break;
        case 24: 
          { yybegin(YYINITIAL); return STRING;
          }
        case 100: break;
        case 5: 
          { return PROPER_NAME;
          }
        case 101: break;
        case 3: 
          { return OPERATOR;
          }
        case 102: break;
        case 48: 
          { return THEN;
          }
        case 103: break;
        case 30: 
          { return DO;
          }
        case 104: break;
        case 45: 
          { return DATA;
          }
        case 105: break;
        case 37: 
          { comment_nesting++; return MLCOMMENT;
          }
        case 106: break;
        case 53: 
          { return CLASS;
          }
        case 107: break;
        case 36: 
          { return DCOLON;
          }
        case 108: break;
        case 31: 
          { return AS;
          }
        case 109: break;
        case 44: 
          { return ELSE;
          }
        case 110: break;
        case 41: 
          { return FLOAT;
          }
        case 111: break;
        case 49: 
          { return CASE;
          }
        case 112: break;
        case 61: 
          { return FOREIGN;
          }
        case 113: break;
        case 52: 
          { return INFIX;
          }
        case 114: break;
        case 43: 
          { return LET;
          }
        case 115: break;
        case 22: 
          { return STRING;
          }
        case 116: break;
        case 15: 
          { return PIPE;
          }
        case 117: break;
        case 1: 
          { return ERROR;
          }
        case 118: break;
        case 47: 
          { return TRUE;
          }
        case 119: break;
        case 17: 
          { return LPAREN;
          }
        case 120: break;
        case 4: 
          { return IDENT;
          }
        case 121: break;
        case 38: 
          { comment_nesting--; if (comment_nesting == 0) yybegin(YYINITIAL); return MLCOMMENT;
          }
        case 122: break;
        case 18: 
          { return RPAREN;
          }
        case 123: break;
        case 58: 
          { return MODULE;
          }
        case 124: break;
        case 12: 
          { return EQ;
          }
        case 125: break;
        case 59: 
          { return HIDING;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
